spring.application.name=apiconnector

# Import application-secret
spring.config.import=optional:classpath:application-secret.properties

# Configuracion de Logging
logging.level.root=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Loki Configuration
loki.url=http://localhost:3100/loki/api/v1/push
management.metrics.tags.application=${spring.application.name}

# Logging patterns
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

# Mongo DB Connection
spring.data.mongodb.uri=mongodb+srv://paismarianoa:pxgwowyIg0QPA3YD@cluster0.cq1hpjy.mongodb.net/weather_records?retryWrites=true&w=majority&appName=Cluster0

# Actuator Configuration
management.endpoints.web.base-path=/actuator
management.endpoint.health.group.custom.include=db,diskSpace,ping

# Enable specific actuator endpoints
management.endpoint.circuitbreakers.enabled=true
management.endpoint.circuitbreakerevents.enabled=true

# Health configuration
management.health.defaults.enabled=true
management.health.circuitbreakers.enabled=true
management.health.db.enabled=false

# Disable health group validation to avoid errors with missing contributors
management.endpoint.health.group.custom.enabled=false
management.endpoint.health.validate-group-membership=false

# Enable only the basic health indicators that we know exist

# Enable health endpoint with minimal details
management.endpoint.health.show-details=never
management.endpoint.health.show-components=never

# Metrics configuration
management.metrics.enable.resilience4j=true
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls=true
management.metrics.distribution.percentiles-histogram.resilience4j.retry.calls=true
management.metrics.distribution.percentiles-histogram.resilience4j.ratelimiter.calls=true
management.metrics.distribution.percentiles-histogram.resilience4j.bulkhead.calls=true

# Enable all metrics endpoints
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=health,info,metrics,prometheus,circuitbreakers,circuitbreakerevents

# Enable specific metrics
management.metrics.enable.all=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.5,0.75,0.90,0.95,0.99
management.metrics.distribution.slo.http.server.requests=100ms,500ms,1s,5s

# Enable all Resilience4j metrics
management.metrics.enable.resilience4j.circuitbreaker.calls=true
management.metrics.enable.resilience4j.retry.calls=true
management.metrics.enable.resilience4j.ratelimiter.calls=true
management.metrics.enable.resilience4j.bulkhead.calls=true
management.metrics.enable.resilience4j.circuitbreaker.buffered.calls=true
management.metrics.enable.resilience4j.circuitbreaker.state=true
management.metrics.enable.resilience4j.circuitbreaker.failure.rate=true

# Web Configuration
server.port=8080
server.servlet.context-path=/

# Resilience4j Circuit Breaker and retry
resilience4j.circuitbreaker.instances.weatherService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.weatherService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.weatherService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.weatherService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.weatherService.waitDurationInOpenState=10s